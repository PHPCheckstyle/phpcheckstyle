
* Check other tools 
http://strategoxt.org/PHP/PhpSat#Features
PMD in PHPUnit : http://www.phpunit.de/
Codenizer : http://www.softwarehood.com/Codenizer/errors/
PHPDepend : http://www.pdepend.org/news.html
checkstyle : http://checkstyle.sourceforge.net/availablechecks.html
    
* ideas of tests to implement : 

-- Explicit initialisation of the variables : http://checkstyle.sourceforge.net/config_coding.html#ExplicitInitialization
-- Check for unnecessary conditionals. ex : if(true)
-- Check for unnecessary conditionals. ex : if($a == $b) return true; else return false;    
-- Check end of line characters (\n) or (\r)  
-- Detect global function (outside of a class) 
-- The first line of a PHPDOC bloc should end with a dot.
-- Unreachable code ( return; $a = 0; )  (check on T_RETURN + levelof nesting ???)

-- if("$param") ou $array["$param"] --> if($param) ou $array[$param]

-- Appel à une fonction qui renvoi un résultat, résultat ignoré
-- Appel à une fonction qui ne renvoi aucun résultat et stockage de null
-- Appel à une fonction avec un paramètre en trop 

-- return value inside a constructor
-- assignment to $this ($this = $toto)

-- No code outside the class 
-- var -> private, protected, ou public
-- No global variable inside a function


* Other modifications
    
-- Add a function to find the next token of a given type
-- Add a function to find the previous token of a given type 
    
-- Add configuration files specific to a given framework (CodeIgniter, Zend) 


-- Refactor, objectify the code.
-- Remove search mode in tokenizer

-- Replace all booleans representing the status ($_inControlStatement, ...) 
   with a list representing the Abstract Syntax Tree. 
   Closing a statement = pop of the list
   Level of nesting = size of the list
   This will allow us to have more contextual info.  

-- Indentation: The tool checks only for existence of tabs in a line. It does not check that every line follows the 4 space indentation rule.
-- Issue with do/while loop: The tool generates wrong errors when a do/while loop contains a while loop or another do/while loop.

// TODO: "while" as part of the "do/while" should be in the same
		// line as "}"; but how do we know whether it is part of "do/while"?
		// Current implementation is kinda forced. It just sets a flag to
		// see to do the "do" and "while" came in a sequence. This works
		// only if there is no other "do" or "while" loops within the do/while.

-- Performance : Don't do test that are not activated